-- I cretaed the tables on Microsoft SQL Server

CREATE TABLE new_sales (
	"customer_id" VARCHAR(50),
	"service_date" DATE,
	"service_id" INTEGER,
	"add_on_1" INTEGER,
	"add_on_2" INTEGER,
	"service_provider_id" INTEGER
	);

	
INSERT INTO new_sales 
	(customer_id,service_date,service_id,add_on_1,add_on_2,service_provider_id)
VALUES
	(1,2021-01-01,1,3,0,1),
	(1,2021-01-01,2,2,0,10),
	(2,2021-01-01,3,0,0,9),
	(3,2021-01-01,4,0,1,8),
	(4,2021-01-01,5,0,2,7),
	(4,2021-01-01,6,2,0,6),
	(6,2021-01-19,7,0,3,5),
	(7,2021-01-01,7,0,1,4),
	(8,2021-01-11,6,4,1,3),
	(9,2021-01-21,5,0,0,2),
	(10,2021-01-31,4,0,0,1),
	(1,2020-01-01,3,3,0,10),
	(2,2016-01-01,2,0,0,9),
	(3,2015-01-01,1,1,0,8),
	(4,2016-01-01,2,0,2,7),
	(4,2016-01-01,3,0,2,6),
	(6,2019-01-19,4,4,0,5),
	(7,2023-01-01,5,4,0,4),
	(8,2022-01-11,6,4,0,3),
	(9,2017-01-21,6,5,2,2),
	(10,2018-01-31,7,1,0,1),
	(10,2021-01-01,7,0,0,10),
	(9,2021-01-01,1,0,0,9),
	(8,2021-01-01,1,0,1,8),
	(7,2021-01-01,1,0,0,7),
	(6,2021-01-01,1,1,0,6),
	(5,2021-01-19,1,0,3,5),
	(4,2021-01-01,2,2,1,4),
	(3,2021-01-11,2,3,5,3),
	(2,2021-01-21,2,1,5,2),
	(1,2021-01-31,3,1,3,1),
	(10,2020-01-01,4,3,0,10),
	(9,2016-01-01,6,2,1,9),
	(8,2015-01-01,5,1,0,8),
	(7,2016-01-01,5,0,2,7),
	(6,2016-01-01,5,0,2,6),
	(5,2019-01-19,3,4,0,5),
	(4,2023-01-01,2,4,0,4),
	(3,2022-01-11,1,4,0,3),
	(2,2017-01-21,2,5,2,2),
	(1,2018-01-31,2,1,0,1),
	(1,2021-01-01,1,3,3,10),
	(2,2021-01-01,4,0,0,9),
	(3,2021-01-01,3,0,1,8),
	(4,2021-01-01,3,1,4,7),
	(4,2021-01-01,3,5,5,6),
	(6,2021-01-19,3,1,3,5),
	(7,2021-01-01,6,0,1,4),
	(8,2021-01-11,2,4,2,3),
	(9,2021-01-21,2,4,1,2),
	(10,2020-12-31,2,2,2,1),
	(1,2022-11-01,1,3,0,10),
	(2,2015-7-01,2,3,0,9),
	(3,2016-08-01,2,1,0,8),
	(4,2017-09-01,3,3,2,7),
	(4,2016-09-01,7,0,2,6),
	(6,2017-06-19,6,4,0,5),
	(7,2022-06-01,4,4,4,4),
	(8,2023-06-11,3,4,0,3),
	(9,2018-06-21,3,5,2,2),
	(10,2018-07-31,3,1,0,1),
	(10,2019-11-01,6,1,2,10),
	(9,2016-11-01,1,3,0,9),
	(8,2017-12-01,2,4,1,8),
	(7,2017-04-01,2,5,0,7),
	(6,2018-09-01,1,4,2,6),
	(5,2020-08-19,4,4,3,5),
	(4,2019-04-01,1,5,1,4),
	(3,2022-03-11,1,0,3,3),
	(2,2022-01-21,6,5,0,2),
	(1,2023-01-31,7,0,1,1),
	(10,2021-01-01,7,3,0,10),
	(9,2019-01-01,7,0,4,9),
	(8,2017-01-01,6,1,1,8),
	(7,2017-01-01,4,3,2,7),
	(6,2017-01-01,1,1,2,6),
	(5,2016-01-19,3,4,2,5),
	(4,2015-01-01,2,4,1,4),
	(3,2015-01-11,1,4,1,3),
	(2,2018-01-21,1,5,2,2),
	(1,2019-01-31,7,1,4,1);


CREATE TABLE customer  (
	"customer_id" VARCHAR(50),
	"join_date" DATE,
	"pay_type" VARCHAR(7)
	);


INSERT INTO customer
	("customer_id","join_date","pay_type")
VALUES 
	('1','2013-11-01','cash'),
	('2','2013-10-01','digital'),
	('3','2013-09-01','credit'),
	('4','2013-08-01','digital'),
	('5','2013-07-01','cash'),
	('6','2013-06-01','cash'),
	('7','2013-05-01','credit'),
	('8','2013-04-01','cash'),
	('9','2013-03-01','digital'),
	('10','2013-02-01','credit');	


CREATE TABLE services (
	"serivce_id" VARCHAR(7),
	"service_name" VARCHAR(10),
	"price" INTEGER
	);



INSERT INTO services
	("serivce_id", "service_name", "price")
VALUES
	('1', 'Cut', '35'),
	('2', 'Shave', '25'),
	('3', 'Cut+Shave', '50'),
	('4', 'Braids', '75'),
	('5', 'Extension', '125'),
	('6', 'Style', '175'),
	('7', 'Set+Style', '250');


CREATE TABLE add_on (
	"add_on_id" INTEGER,
	"add_on_name" VARCHAR(8),
	"price" INTEGER
	);

CREATE TABLE add_on_2 (
	"add_on_2_id" INTEGER,
	"add_on_name" VARCHAR(8),
	"price" INTEGER
	);

INSERT INTO add_on
	("add_on_id", "add_on_name", "price")
VALUES
	('1', 'Wash', '20'),
	('2', 'Dry', '25'),
	('3', 'Trim', '45'),
	('4', 'Dye', '50'),
	('5', 'Highlight', '75');


INSERT INTO add_on_2
	("add_on_2_id", "add_on_name", "price")
VALUES
	('1', 'Wash', '20'),
	('2', 'Dry', '25'),
	('3', 'Trim', '45'),
	('4', 'Dye', '50'),
	('5', 'Highlight', '75');


CREATE TABLE providers (
	"service_provider_id" INTEGER,
	"start_date" DATE,
	"provider_type" VARCHAR(10)
	);


INSERT INTO providers
	("service_provider_id", "start_date", "provider_type")
VALUES
	('1', '2014-01-01', 'barber'),
	('2', '2015-02-01', 'barber'),
	('3', '2014-03-01', 'stylist'),
	('4', '2015-04-01', 'stylist'),
	('5', '2014-05-01', 'barber'),
	('6', '2015-06-01', 'barber'),
	('7', '2014-07-01', 'stylist'),
	('8', '2015-08-01', 'barber'),
	('9', '2014-09-01', 'stylist'),
	('10', '2015-10-01', 'barber')	;
	


Question 1 : What is the total amount each customer has spent at Cal's Corner?	

Answer:

customer_id	    Total_Spent
9	              740
4	              735
8	              655
1	              560
2	              380
7             	320
6	              305
5	              295
10	            295
3	              250

--First, I joined tables new_sales, services, add_on's and add_on_2's to find the total spent per transaction. Once calculated 
I used the SUM function with GROUP BY to group the customers. 

SELECT new_sales.customer_id,SUM(services.price + add_on.price + add_on_2.price) AS Total_Spent
FROM new_sales
JOIN services	
ON new_sales.service_id = services.serivce_id
LEFT JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
LEFT JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
GROUP BY 1
Order BY 2 DESC;




Question 2 : What is the total amount each customer has spent annualy at Cal's Corner?	

Answer : 

customer_id	  service_date	Total_Spent
1           	1986	
1	          	1987	        320
1	          	1989        	115
1	          	2010	
1	          	2018	
1	          	2019	        515
10	          1977	        75
10	          1980	
2	          	1995        	400
2	          	1996	        260
2	          	1999	        215
2	          	2000	
2	          	2007	        340
3          		2003	        105
3          		2008	        110
3	          	2009	        490
3	          	2013	        95
4	          	2014	        350
4          		2021	
5	          	1993	        170
5	          	2001	        115
6          		1992	
6	          	2015	        615
7          		2012	
8	          	2006	
9	          	1991	        150
9	          	2004	        95
9	          	2017	


--First, I joined tables new_sales, services, add_on's and add_on_2's to find the total spent per transaction. Once calculated 
I used the SUM function with GROUP BY to group the service_date and ordered them by the customer_id.


SELECT new_sales.customer_id,new_sales.service_date,SUM(services.price + add_on.price + add_on_2.price) AS Total_Spent
FROM new_sales
INNER JOIN services	
ON new_sales.service_id = services.serivce_id
LEFT JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
LEFT JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
GROUP BY 2
ORDER BY 1 ASC;



Question 3 : How many times has each customer visitied Cal's Corner?	

Answer : 
customer_id	    Visits
5	              4
10              8
2	              8
3              	8
6	              8
7              	8
8	              8
9	              8
1	              9
4	              12

-- I used the functions COUNT and GROUP BY:

SELECT customer_id, COUNT(customer_id) AS Visits 
FROM new_sales
GROUP BY 1
ORDER BY 2 ASC;



Question 4 : What is the first service each customer has recieved at Cal's Corner?	

Answer : 

customer_id	  First_service
1           	1986
10          	1977
2	          	1995
3	          	2003
4          		2006
5	          	1993
6          		1992
7	          	2012
8	          	2004
9          		1991

--I grouped the data by the customer_id and used the MIN() function to find the earlies recorded date of service 
from each customer.


SELECT customer_id, MIN(service_date) AS First_service
FROM new_sales
GROUP BY 1;


Question 5 : how many times was each service purchased and What is the most purchased service at Cal's Corner?	

Answer 1: 

service_name 	QTY
Shave       	17
Cut	          17
Cut+Shave	    14
Style	        10
Set+Style	    9
Braids	      8
Extension	    6



-- First, I Joined the tables new_sales and services. Using the Count and the Group By functions,
grouping the service_type to show the number of each service that was ordered. 

SELECT service_name, COUNT() AS QTY
FROM new_sales
JOIN services
ON new_sales.service_id = services.serivce_id
GROUP BY 1
ORDER BY 2 DESC;



Answer 2 :

service_name	QTY
Shave	        17
Cut         	17

--Using the first half of the code written that found the total number of each service, I used the MAX function 
to selected the highest utilized services.

SELECT service_name, MAX(QTY)
FROM (
SELECT service_name, COUNT() AS QTY
FROM new_sales
JOIN services
ON new_sales.service_id = services.serivce_id
GROUP BY 1
);



Question 6 : What are the most purchased add-on and how many times was it purchased at Cal's Corner?	

Answer : 
add_on_name	 QTY
Wash	       24







SELECT add_on.add_on_name, SUM(add_on.add_on_name + add_on_2.add_on_2_id) AS QTY
FROM new_sales
JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;



Question 7 : What is the most popular service purchased by each customer at Cal's Corner?	

Answer : 

customer_id	   service_name	   Number_of_Services
1	             Cut	           9
10		         Shave	         8
2		           Cut	           8
3	             Cut	           8
4		           Cut	           12
5		           Cut	           4
6		           Cut	           8
7		           Cut	           8
8		           Cut	           8
9		           Cut	           8








SELECT customer_id,services.service_name, COUNT(service_name) AS Number_of_Services
FROM new_sales
JOIN services
ON new_sales.service_id = services.serivce_id
GROUP BY 1
ORDER BY 1;


Question 8 : How much revenue was recieved and how was it tendered at Cal's Corner?	

Answer : 

Tender_Type	 Revenue
cash	       7260
credit	     3460
digital	     7420






SELECT customer.pay_type AS Tender_Type, SUM(services.price + add_on.price + add_on_2.price) AS Revenue
FROM new_sales
LEFT JOIN services
ON new_sales.service_id = services.serivce_id
LEFT JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
LEFT JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
JOIN customer
ON new_sales.customer_id = customer.customer_id
GROUP BY 1
ORDER BY 1;



Question 9 : What is the annual revenue recived at Cal's Corner?	

Answer : 

service_date	Annual_Revenue
1977	        75
1980	        70
1986	        315
1987	        320
1989	        190
1991	        420
1992	        225
1993	        170
1995	        400
1996	        260
1999	        565
2000	        250
2001	        490
2003	        105
2004	        175
2006	        375
2007	        455
2008	        190
2009	        490
2010	        390
2012	        100
2013	        295
2014	        800
2015	        615
2017	        300
2018	        215
2019	        2475
2021	        250







CREATE TABLE Annual (
	"service_date" DATE,
	"price" INTEGER,
	"add_on_1" INTEGER,
	"add_on_2" INTEGER
	--"Annual_Total" INTEGER 
	)

 
INSERT INTO Annual (service_date, price, add_on_1, add_on_2)
SELECT new_sales.service_date,services.price, IFNULL(add_on.price,0) AS Add_on_1, IFNULL(add_on_2.price,0) AS Add_on_2
FROM new_sales
JOIN services
ON new_sales.service_id = services.serivce_id
LEFT JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
LEFT JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
ORDER BY 1;


SELECT service_date, SUM(price + add_on_1 + add_on_2) AS Annual_Revenue
FROM Annual
GROUP BY 1; 






Question 10 : how much has each provider made annualy at Cal's Corner?	

Answer : 

service_date	provider_type	 Annual_Rev
1977	        barber	       75
1980	        barber	       70
1986	        barber	       45
1986	        barber	       270
1987	        barber	       320
1989	        barber	       115
1989	        barber	       75
1991	        barber	       150
1991	        barber	       270
1992	        barber	       225
1993	        barber	       170
1995	        barber	       125
1995	        barber	       275
1996	        barber	       135
1996	        barber	       125
1999	        barber	       120
1999	        barber	       95
1999	        barber	       100
1999	        barber	       125
1999	        barber	       125
2000	        barber	       250
2001	        barber	       80
2001	        barber	       115
2001	        barber	       295
2003	        stylist	       105
2004	        stylist        80
2004	        barber	       95
2006	        stylist	       100
2006	        barber	       275
2007	        barber	       45
2007	        stylist	       70
2007	        stylist	       120
2007	        barber	       220
2008	        stylist	       80
2008	        barber	       110
2009	        stylist	       145
2009	        stylist	       100
2009	        stylist	       245
2010	        barber	       80
2010	        stylist	       85
2010	        stylist        225
2012	        stylist	       100
2013	        barber	       55
2013	        stylist	       95
2013	        barber	       145
2014	        stylist	       130
2014	        stylist	       25
2014	        stylist	       50
2014	        barber	       75
2014	        barber	       150
2014	        stylist	       150
2014	        stylist	       220
2015	        barber	       80
2015	        stylist	       145
2015	        stylist	       175
2015	        barber	       215
2017	        stylist	       300
2018	        barber	       95
2018	        barber	       120
2019	        stylist	       35
2019	        stylist	       35
2019	        barber	       55
2019	        barber	       55
2019	        barber	       80
2019	        barber	       125
2019	        barber	       50
2019	        stylist	       70
2019	        stylist	       50
2019	        barber	       70
2019	        stylist	       120
2019	        barber	       200
2019	        stylist	       75
2019	        barber	       95
2019	        stylist	       150
2019	        stylist	       195
2019	        barber	       200
2019	        barber	       250
2019	        stylist	       270
2019	        barber	       295
2021	        stylist	       75
2021	        stylist	       175







CREATE TABLE Provider_Annual (
	"service_date" DATE,
	"provider_type" VARCHAR(10),
	"price" INTEGER,
	"add_on_1" INTEGER,
	"add_on_2" INTEGER
	--"Annual_Total" INTEGER 
	)


INSERT INTO Provider_Annual (service_date, provider_type, price, add_on_1, add_on_2)
SELECT new_sales.service_date, providers.provider_type, services.price, IFNULL(add_on.price,0) AS Add_on_1, IFNULL(add_on_2.price,0) AS Add_on_2
FROM new_sales
JOIN services
ON new_sales.service_id = services.serivce_id
LEFT JOIN add_on
ON new_sales.add_on_1 = add_on.add_on_id
LEFT JOIN add_on_2
ON new_sales.add_on_2 = add_on_2.add_on_2_id
JOIN providers
ON new_sales.service_provider_id = providers.service_provider_id;


SELECT service_date, provider_type, price, add_on_1, add_on_2, price + add_on_1 + add_on_2  AS Annual_Rev
FROM Provider_Annual
ORDER BY 1;


